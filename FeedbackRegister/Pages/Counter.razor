@page "/counter"
@using static FeedbackRegister.Data.ConnectClass
@using FeedbackRegister.Data
@using System.Collections
@using static FeedbackRegister.Data.DataGridService
@using Microsoft.EntityFrameworkCore
@using Radzen
@using Radzen.Blazor
@inject NavigationManager NavigationManager

@inject DataGridService dataGridService;

<PageTitle>Сотрудники</PageTitle>

<h2>Сотрудники</h2>
@if(employee == null)
{
    <p>Loading...</p>
}
else
{
    @*<div style="display: flex; align-items: center; margin-bottom: 16px">
    @if (selectedEmployees?.Any() == true)
    {
    <div style="margin-left: 16px">
        Selected Employee: @selectedEmployees[0].name
    </div>
    }
    </div>*@
    <div class="nav-item pt-1 pb-3">
            <NavLink>
                    <button class='btn btn-primary' onclick=@addEmployee>Добавить сотрудника</button>
            </NavLink>
            <NavLink href="Counter">
                    <button class='btn btn-primary' onclick=@deleteEmployee>Удалить</button>
            </NavLink>
        </div>

    <RadzenDataGrid  AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10" class="column_height_class" @ref="grid" style="margin-left:-25px; margin-right:-25px"
    AllowSorting="true" TItem="Employee" Data="employee" SelectionMode="DataGridSelectionMode.Single" ColumnWidth="150px" @bind-Value=@selectedEmployees RowDoubleClick=@getRowValue>
        <Columns>
            <RadzenDataGridColumn  TItem="Employee" Property="id" Title="ID" Visible="false"></RadzenDataGridColumn>
            <RadzenDataGridColumn  TItem="Employee" Property="name" Title="Имя" Width="150px"></RadzenDataGridColumn>
            <RadzenDataGridColumn  TItem="Employee" Property="email" Title="Email" Width="100px"></RadzenDataGridColumn>
            <RadzenDataGridColumn  TItem="Employee" Property="telefon" Title="Телефон" Width="100px"></RadzenDataGridColumn>
            <RadzenDataGridColumn  TItem="Employee" Property="deactivation" Title="Деактивирован" Width="50px"></RadzenDataGridColumn>
            <RadzenDataGridColumn  TItem="Employee" Property="role.roleName" Title="Role"></RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {
    string? name { get; set; }
    string? email { get; set; }
    string? role { get; set; }
    string? telefon { get; set; }

    public IList<Employee> selectedEmployees;
    List<Employee> employee;
    private int? currentCount = 0;
    bool? visible { get; set; }
    RadzenDataGrid<Employee> grid;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        IncrementCount();
        employee = dataGridService.EmployeeList().ToList();
        selectedEmployees = employee.Take(1).ToList();
        //grid.Value[0].role.roleName.ToString();

    }
    public void deleteEmployee()
    {
        Guid idEmployee = selectedEmployees[0].id;
        if (idEmployee != Guid.Empty)
        {
            using (var db = new ConnectContext())
            {
                var employee = db.employees.Where(x => x.id == idEmployee).ToList();
                if (employee.Count > 0)
                {
                    db.Remove(employee[0]);
                    db.SaveChanges();
                }
            }
        }
        employee = dataGridService.EmployeeList().ToList();
    }
    public void getRowValue()
    {
        employee = dataGridService.EmployeeList().ToList();

        if (selectedEmployees[0] != null)
        {
            NavigationManager.NavigateTo("UpdateEmployee/"+selectedEmployees[0].id.ToString());
        }
    }
    public void addEmployee()
    {
        if (selectedEmployees[0] != null)
        {
            NavigationManager.NavigateTo("AddEmployee");
        }
    }
    private void IncrementCount()
    {
        using (var db = new ConnectContext())
        {
            //currentCount = (db.employees?.ToList().Count != 0) ? db.employees?.ToList().Count : 0;
        }
        if (visible == true)
        {
            visible = false;
        }
        else
        {
            visible = true;
        }
    }
    }